// user/current user/current client/user are same here.
// joined room is active room

import { useToast } from "@chakra-ui/react";
import React, {
  useCallback,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";
import io from "socket.io-client";
import { v4 } from "uuid";
import { AuthContext } from "./authcontext";

export const socket = io("https://baatein-server-byashish.herokuapp.com");

export const SocketContext = React.createContext({
  createRoom: () => {},
  joinRoom: () => {},
  closeRoomCreatedModal: () => {},
  isAlreadyRoomMember: () => {},
  notifyOtherUser: () => {},
  sendRoomMessage: () => {},
  isShowRoomCreatedModal: false,
  // isJoiningRoom: false,
  generatedRoomId: null,
});

const SocketContextProvider = function (props) {
  // must be true when new room is successfully created so that current user can be notified with modal displaying room id and let current user save it if user wants, false otherwise.
  const [isShowRoomCreatedModal, setIsShowRoomCreatedModal] = useState(false);

  // must be qual to room id which is generated by server or which is mentioned in the url [:roomid] part.
  const [generatedRoomId, setGeneratedRoomId] = useState(null);

  // it's 'current' property will store refrence to toast component.
  const toastIdRef = useRef();

  // const [isJoiningRoom, setIsJoiningRoom] = useState(false);

  // toast component.
  const toast = useToast();

  // stores provied socket id and current user details.
  const {
    storeSocketId,
    currentUserDetails,
    upDateUserData,
    updateCurrentUsersDetails,
    registerRoomOnDatabase,
    addNewMemberToRoom,
    updateActiveRoomMembers,
    updateActiveRoomMessages,
    isCurrentUserSocketUpdated,
    addNewMessageToRoom,
  } = useContext(AuthContext);

  const close = useCallback(
    function () {
      if (toastIdRef.current) {
        toast.close(toastIdRef.current);
      }
    },
    [toastIdRef, toast]
  );

  useEffect(() => {
    // event for storing socket id generated by server
    socket.on("store socket id", ({ socketId }) => {
      storeSocketId(socketId);
    });

    // event emitted by server when room is created
    socket.on("room created", ({ newRoomId }) => {
      setGeneratedRoomId(newRoomId);
      setIsShowRoomCreatedModal(true);
    });

    // event emitted by server when entered room id is valid or room actually exists then client is allowed to joined.
    socket.on("room joined", ({ roomId, userName }) => {
      console.log(roomId, userName);
      close();
      toastIdRef.current = toast({
        title: `room joined with room Id ${roomId}`,
        description: "navigate to messenger",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
    });

    // event emitted by server when client enters invalid room id, hence server denied the request of client to join room
    socket.on("can not join", ({ reason }) => {
      close();
      toastIdRef.current = toast({
        title: "error",
        description: reason,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    });

    socket.on("new user joined", ({ userName }) => {
      console.log("new user joined ");
      updateActiveRoomMembers(userName);
    });

    socket.on("new notification", ({ title, userName, email }) => {
      close();
      toastIdRef.current = toast({
        title: `${title}`,
        description: `${userName} with email id '${email}' sent you a friend request.`,
        status: "success",
        duration: 10000,
        isClosable: true,
      });
    });

    socket.on("store new message", ({ sender, message }) => {
      console.log("new message");
      updateActiveRoomMessages({ sender, message });
    });
  }, [
    close,
    toast,
    updateActiveRoomMessages,
    updateActiveRoomMembers,
    storeSocketId,
  ]);

  const createRoom = function () {
    const newRoomId = v4();

    setGeneratedRoomId(newRoomId);

    registerRoomOnDatabase({
      roomId: newRoomId,
      messages: [],
      members: [currentUserDetails.userName],
      createdBy: currentUserDetails.userName,
      roomName: `${currentUserDetails.userName}'s room'`,
    });

    socket.emit("create room", {
      newRoomId,
      clientId: currentUserDetails.clientId,
    });

    const updatedRooms = [
      ...currentUserDetails.rooms,
      {
        roomName: `${currentUserDetails.userName}'s room'`,
        roomId: newRoomId,
        createdBy: currentUserDetails.userName,
      },
    ];
    upDateUserData(currentUserDetails.FirebaseId, {
      rooms: updatedRooms,
    });
    updateCurrentUsersDetails({
      ...currentUserDetails,
      rooms: updatedRooms,
    });
  };

  const isAlreadyRoomMember = function (roomId) {
    return currentUserDetails.rooms.some(
      (roomData) => roomData.roomId === roomId
    );
  };

  const joinRoom = function ({ roomId, userName, clientId }) {
    socket.emit("join room", { roomId, userName, clientId });
    addNewMemberToRoom({ roomId, userName });
  };

  const sendRoomMessage = function ({ roomId, sender, message }) {
    updateActiveRoomMessages({ sender, message });
    socket.emit("new message", { sender, message, roomId });
    addNewMessageToRoom({ roomId, sender, message });
  };

  const notifyOtherUser = function (socketId, { title, userName, email }) {
    socket.emit("notify", {
      recieverSocketID: socketId,
      title,
      userName,
      email,
    });
  };

  const closeRoomCreatedModal = function () {
    setIsShowRoomCreatedModal(false);
    close();
  };

  if (isCurrentUserSocketUpdated === true) {
    socket.emit("have i joined any room", {
      clientId: currentUserDetails.clientId,
    });
  }

  return (
    <SocketContext.Provider
      value={{
        createRoom,
        joinRoom,
        closeRoomCreatedModal,
        isAlreadyRoomMember,
        notifyOtherUser,
        generatedRoomId,
        isShowRoomCreatedModal,
        sendRoomMessage,
      }}
    >
      {props.children}
    </SocketContext.Provider>
  );
};

export default SocketContextProvider;
